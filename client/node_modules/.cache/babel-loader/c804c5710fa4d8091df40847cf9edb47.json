{"ast":null,"code":"import { SET_CURRENT_CONVERSATION, GET_CONVERSATIONS, SET_CURRENT_CONVERSATION_MESSAGES, ADD_MESSAGE_TO_CURRENT_CONVERSATION_MESSAGES, INCREMENT_CONVERSATION_UNREAD_MESSAGES, RESET_CONVERSATION_UNREAD_MESSAGES, DELETE_CONVERSATION, REMOVE_CONVERSATION, REMOVE_MESSAGE_FROM_CONVERSATION, RESET } from '../actions/types';\nconst initialState = {\n  result: [],\n  currentPartnerIdConversation: null,\n  currentPartnerIdIsDeleting: null,\n  isFetching: false\n};\nexport default ((state = initialState, action) => {\n  const setNewConversationToResult = () => {\n    return state.result.find(item => String(item.partnerId._id) === String(action.params.partner._id)) ? state.result : state.result.concat([{\n      partnerId: action.params.partner,\n      messages: [],\n      unreadMessages: 0\n    }]);\n  };\n\n  switch (action.type) {\n    case SET_CURRENT_CONVERSATION:\n      return { ...state,\n        currentPartnerIdConversation: action.data.partner._id,\n        result: setNewConversation()\n      };\n\n    case GET_CONVERSATIONS:\n      return { ...state,\n        result: action.data.result,\n        isFetching: true\n      };\n\n    case SET_CURRENT_CONVERSATION_MESSAGES:\n      return { ...state,\n        result: state.result.map(item => {\n          const newItem = item;\n\n          if (String(newItem._id) === String(action.data.partnerId)) {\n            newItem.messages = action.data.result;\n          }\n\n          return newItem;\n        })\n      };\n\n    case ADD_MESSAGE_TO_CURRENT_CONVERSATION_MESSAGES:\n      return { ...state,\n        result: setNewConversation().map(item => {\n          const newItem = item;\n          const {\n            message,\n            partner\n          } = action.data;\n\n          if (String(newItem._id) === String(partner._id)) {\n            newItem.message = newItem.message.concat(message);\n          }\n\n          return newItem;\n        })\n      };\n\n    case INCREMENT_CONVERSATION_UNREAD_MESSAGES:\n      return { ...state,\n        result: state.result.map(item => {\n          const newItem = item;\n          const {\n            partner\n          } = action.data;\n\n          if (newItem.partnerId._id === partner._id) {\n            newItem.unreadMessages += 1;\n          }\n\n          return newItem;\n        })\n      };\n\n    case RESET_CONVERSATION_UNREAD_MESSAGES:\n      return { ...state,\n        result: state.result.map(item => {\n          const newItem = item;\n          const {\n            partner\n          } = action.data;\n\n          if (newItem.partnerId._id === partner._id) {\n            newItem.unreadMessages = 0;\n          }\n\n          return newItem;\n        })\n      };\n\n    case DELETE_CONVERSATION:\n      return { ...state,\n        isFetching: true,\n        currentPartnerIdConversation: action.data.partnerId\n      };\n\n    case REMOVE_CONVERSATION:\n      return { ...state,\n        result: state.result.filter(item => String(item.partnerId._id) !== String(action.data.partnerId)),\n        currentPartnerIdConversation: String(state.currentPartnerIdConversation) === String(action.data.partnerId) ? null : state.currentPartnerIdConversation\n      };\n\n    case REMOVE_MESSAGE_FROM_CONVERSATION:\n      return { ...state,\n        result: state.result.map(item => {\n          if (String(item.partnerId._id) === String(action.data.partnerId)) {\n            item.messages = item.messages.filter(message => message._id !== action.data.messageId);\n          }\n\n          return item;\n        })\n      };\n\n    case RESET:\n      return state;\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/JavascriptProjects2/socketChatApp/client/src/reducers/conversation.js"],"names":["SET_CURRENT_CONVERSATION","GET_CONVERSATIONS","SET_CURRENT_CONVERSATION_MESSAGES","ADD_MESSAGE_TO_CURRENT_CONVERSATION_MESSAGES","INCREMENT_CONVERSATION_UNREAD_MESSAGES","RESET_CONVERSATION_UNREAD_MESSAGES","DELETE_CONVERSATION","REMOVE_CONVERSATION","REMOVE_MESSAGE_FROM_CONVERSATION","RESET","initialState","result","currentPartnerIdConversation","currentPartnerIdIsDeleting","isFetching","state","action","setNewConversationToResult","find","item","String","partnerId","_id","params","partner","concat","messages","unreadMessages","type","data","setNewConversation","map","newItem","message","filter","messageId"],"mappings":"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","sourcesContent":["import {\r\n\tSET_CURRENT_CONVERSATION,\r\n\tGET_CONVERSATIONS,\r\n\tSET_CURRENT_CONVERSATION_MESSAGES,\r\n\tADD_MESSAGE_TO_CURRENT_CONVERSATION_MESSAGES,\r\n\tINCREMENT_CONVERSATION_UNREAD_MESSAGES,\r\n\tRESET_CONVERSATION_UNREAD_MESSAGES,\r\n\tDELETE_CONVERSATION,\r\n\tREMOVE_CONVERSATION,\r\n    REMOVE_MESSAGE_FROM_CONVERSATION,\r\n    RESET\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    result: [],\r\n    currentPartnerIdConversation:null,\r\n    currentPartnerIdIsDeleting:null,\r\n    isFetching: false\r\n}\r\n\r\nexport default (state=initialState,action) => {\r\n\tconst setNewConversationToResult = () => {\r\n\t\treturn state.result.find(item => String(item.partnerId._id) === String(action.params.partner._id))\r\n\t\t\t? state.result\r\n\t\t\t: state.result.concat([{\r\n\t\t\t\tpartnerId: action.params.partner,\r\n\t\t\t\tmessages: [],\r\n\t\t\t\tunreadMessages: 0\r\n\t\t\t}]);\r\n\t};\r\n\r\n    switch(action.type){\r\n        case SET_CURRENT_CONVERSATION:\r\n            return {\r\n                ...state,\r\n                currentPartnerIdConversation: action.data.partner._id,\r\n                result: setNewConversation()\r\n            }\r\n\r\n         case GET_CONVERSATIONS:\r\n             return {\r\n                 ...state,\r\n                 result: action.data.result,\r\n                 isFetching: true\r\n             }  \r\n             \r\n         case SET_CURRENT_CONVERSATION_MESSAGES:\r\n             return {\r\n                 ...state,\r\n                 result: state.result.map(item => {\r\n                     const newItem = item;\r\n                     if(String(newItem._id) === String(action.data.partnerId)){\r\n                         newItem.messages = action.data.result;\r\n                     }\r\n                     return newItem;\r\n                 })\r\n             }\r\n             \r\n          case ADD_MESSAGE_TO_CURRENT_CONVERSATION_MESSAGES:\r\n              return {\r\n                  ...state,\r\n                  result: setNewConversation().map(item => {\r\n                      const newItem = item;\r\n                      const {message,partner} = action.data;\r\n                      if(String(newItem._id) === String(partner._id)){\r\n                          newItem.message = newItem.message.concat(message)\r\n                      }\r\n\r\n                      return newItem;\r\n                  })\r\n              }   \r\n\r\n           case INCREMENT_CONVERSATION_UNREAD_MESSAGES:\r\n               return {\r\n                   ...state,\r\n                   result: state.result.map(item => {\r\n                       const newItem = item;\r\n                       const {partner} = action.data;\r\n                       if(newItem.partnerId._id === partner._id){\r\n                           newItem.unreadMessages += 1;\r\n                       }\r\n\r\n                       return newItem;\r\n                   })\r\n               }  \r\n               \r\n            case RESET_CONVERSATION_UNREAD_MESSAGES:\r\n                return {\r\n                    ...state,\r\n                    result: state.result.map(item => {\r\n                        const newItem = item;\r\n                        const {partner} = action.data;\r\n                        if(newItem.partnerId._id === partner._id){\r\n                            newItem.unreadMessages=0;\r\n                        }\r\n                        return newItem;\r\n                }) \r\n              }\r\n\r\n            case DELETE_CONVERSATION:\r\n                return {\r\n                    ...state,\r\n                    isFetching: true,\r\n                    currentPartnerIdConversation: action.data.partnerId\r\n                }  \r\n\r\n            case REMOVE_CONVERSATION:\r\n                return {\r\n                    ...state,\r\n                    result: state.result.filter(item => String(item.partnerId._id) !== String(action.data.partnerId)),\r\n                    currentPartnerIdConversation: (String(state.currentPartnerIdConversation) === String(action.data.partnerId) ? null : state.currentPartnerIdConversation)\r\n                } \r\n                \r\n            case REMOVE_MESSAGE_FROM_CONVERSATION:\r\n                return {\r\n                    ...state,\r\n                    result: state.result.map(item => {\r\n                        if(String(item.partnerId._id) === String(action.data.partnerId)){\r\n                            item.messages = item.messages.filter(message => message._id !== action.data.messageId)\r\n                        }\r\n                        return item;\r\n                    })\r\n                } \r\n                \r\n            case RESET:\r\n                return state;\r\n            default: \r\n                return state;        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}