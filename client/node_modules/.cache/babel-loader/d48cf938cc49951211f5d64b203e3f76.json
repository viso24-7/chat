{"ast":null,"code":"var _jsxFileName = \"C:\\\\JavascriptProjects2\\\\socketChatApp\\\\client\\\\src\\\\components\\\\entries\\\\entry-home\\\\chat\\\\Chat.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { confirmAlert } from 'react-confirm-alert';\nimport { postMessage, deleteMessage } from '../../../../actions/message';\nimport { resetConversationUnreadMessages } from '../../../../actions/conversation';\nimport UserInfo from '../../user-info/UserInfo';\nimport MessageList from '../../message/MessageList';\nimport Icon from '../../../others/icon/Icon';\nimport Label from '../../../others/label/Label';\nimport Button from '../../../others/button/Button';\nimport ContentEditable from '../../../others/editContent/ContentEditable';\nimport '';\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setConversationIsRead = () => {\n      const {\n        conversation,\n        dispatch\n      } = this.props;\n      const {\n        currentPartnerIdConversation,\n        result: conversations\n      } = conversation;\n      const currentConversation = conversations.find(item => String(item.partnerId._id) === String(currentPartnerIdConversation));\n      const {\n        partnerId,\n        unreadMessages\n      } = currentConversation;\n\n      if (unreadMessages > 0) {\n        dispatch(resetConversationUnreadMessages(partnerId));\n      }\n    };\n\n    this.handleSendMessage = message => {\n      if (message) {\n        const {\n          conversation: currentPartnerIdConversation,\n          dispatch\n        } = this.props;\n        const params = {\n          body: {\n            message,\n            receiverId: currentPartnerIdConversation\n          }\n        };\n        dispatch(postMessage(params));\n      }\n    };\n\n    this.handleDeleteMessage = messageId => {\n      const {\n        conversation: {\n          currentPartnerIdConversation: partnerId\n        },\n        dispatch\n      } = this.props;\n      confirmAlert({\n        customUI: ({\n          onClose\n        }) => {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"confirm-popup\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(Label, {\n            fontSemiBold: true,\n            text: \"Delete message?\",\n            fontSize: 30,\n            alignCenter: true,\n            margin: \"0px 0px 25px 0px\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"buttons-container\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            type: \"button\",\n            defaultButton: true,\n            small: true,\n            outline: true,\n            text: \"no\",\n            margin: \"10px\",\n            width: 100,\n            onClick: onClose,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 29\n            }\n          }), /*#__PURE__*/React.createElement(Button, {\n            type: \"button\",\n            defaultButton: true,\n            small: true,\n            outline: true,\n            text: \"yes\",\n            margin: \"10px\",\n            width: 100,\n            onClick: () => {\n              dispatch(deleteMessage(messageId, partnerId));\n              onClose();\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }\n          })));\n        }\n      });\n    };\n\n    this.getCurrentConversationMessages = messages => {\n      const {\n        message: deleteMessage\n      } = this.props;\n      return messages.map(message => {\n        message.isFetchingAction = deleteMessage.isFetching && String(deleteMessage.currentMessageIdIsDeleting) === String(message._id);\n        return message;\n      });\n    };\n\n    this.renderChatContainer = () => {\n      const {\n        message: getMessages,\n        conversation: {\n          currentPartnerIdConversation,\n          result: {\n            conversations\n          }\n        }\n      } = this.props;\n\n      if (!currentPartnerIdConversation) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"empty-message-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          icon: \"chat-emoji\",\n          height: 200,\n          width: 200,\n          margin: \"0px 0px 25px 20px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }\n        }));\n      }\n\n      const currentConversation = conversations.find(con => String(con.partnerId._id) === String(currentPartnerIdConversation));\n      const {\n        nickname,\n        profileColor\n      } = currentConversation.partnerId;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"chat-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"header\", {\n        className: \"header-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(UserInfo, {\n        isFetching: false,\n        sketchDark: true,\n        profile: {\n          label: nickname,\n          height: 40,\n          width: 40,\n          backgroundColor: profileColor,\n          color: 'white',\n          labelFontSize: 14\n        },\n        title: {\n          text: nickname,\n          fontSize: 13,\n          margin: \"0px 0px 0px 14px\"\n        },\n        desc: {\n          text: '',\n          fontSize: 13,\n          maxWidth: 100,\n          margin: \"0px 0px 0px 14px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"section\", {\n        ref: this.conversationContainer,\n        className: \"conversation-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(MessageList, {\n        isFetching: getMessages.isFetching,\n        item: this.getCurrentConversationMessages(currentConversation.messages),\n        onMouseOver: this.setConversationIsRead,\n        onFocus: this.setConversationIsRead,\n        handleDeleteMessage: this.handleDeleteMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 20\n        }\n      })), /*#__PURE__*/React.createElement(\"footer\", {\n        className: \"footer-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ContentEditable, {\n        onEnter: this.handleSendMessage,\n        onFocus: this.setConversationIsRead,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }\n      })));\n    };\n\n    this.conversationContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      current\n    } = this.conversationContainer;\n\n    if (current) {\n      current.scrollTop = current.scrollHeight;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, this.renderChatContainer());\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  conversation: state.conversation,\n  message: state.message\n});\n\nexport default connect(mapStateToProps)(Chat);","map":{"version":3,"sources":["C:/JavascriptProjects2/socketChatApp/client/src/components/entries/entry-home/chat/Chat.js"],"names":["React","Component","connect","confirmAlert","postMessage","deleteMessage","resetConversationUnreadMessages","UserInfo","MessageList","Icon","Label","Button","ContentEditable","Chat","constructor","props","setConversationIsRead","conversation","dispatch","currentPartnerIdConversation","result","conversations","currentConversation","find","item","String","partnerId","_id","unreadMessages","handleSendMessage","message","params","body","receiverId","handleDeleteMessage","messageId","customUI","onClose","getCurrentConversationMessages","messages","map","isFetchingAction","isFetching","currentMessageIdIsDeleting","renderChatContainer","getMessages","con","nickname","profileColor","label","height","width","backgroundColor","color","labelFontSize","text","fontSize","margin","maxWidth","conversationContainer","createRef","componentDidMount","current","scrollTop","scrollHeight","render","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {confirmAlert} from 'react-confirm-alert';\r\nimport {postMessage,deleteMessage} from '../../../../actions/message';\r\nimport {resetConversationUnreadMessages} from '../../../../actions/conversation';\r\nimport UserInfo from '../../user-info/UserInfo';\r\nimport MessageList from '../../message/MessageList';\r\nimport Icon from '../../../others/icon/Icon';\r\nimport Label from '../../../others/label/Label';\r\nimport Button from '../../../others/button/Button';\r\nimport ContentEditable from '../../../others/editContent/ContentEditable';\r\nimport '';\r\n\r\nclass Chat extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.conversationContainer = React.createRef();\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {current} = this.conversationContainer;\r\n        if(current){\r\n            current.scrollTop = current.scrollHeight;\r\n        }\r\n    }\r\n\r\n    setConversationIsRead = () => {\r\n         const {conversation,dispatch} = this.props;\r\n         const {currentPartnerIdConversation,result:conversations} = conversation;\r\n\r\n         const currentConversation = conversations.find(item => String(item.partnerId._id) === String(currentPartnerIdConversation));\r\n         const {partnerId,unreadMessages} = currentConversation;\r\n         if(unreadMessages > 0){\r\n             dispatch(resetConversationUnreadMessages(partnerId))\r\n         }\r\n    }\r\n\r\n    handleSendMessage = message => {\r\n        if(message){\r\n            const {conversation:currentPartnerIdConversation,dispatch} = this.props;\r\n            const params = {\r\n                   body: {\r\n                          message,\r\n                          receiverId: currentPartnerIdConversation\r\n                        }\r\n                  }\r\n\r\n            dispatch(postMessage(params));      \r\n        }\r\n    }\r\n\r\n    handleDeleteMessage = messageId => {\r\n        const {conversation:{currentPartnerIdConversation: partnerId},dispatch} = this.props;\r\n\r\n        confirmAlert({\r\n            customUI: ({onClose}) => {\r\n                return (\r\n                    <div className=\"confirm-popup\">\r\n                        <Label fontSemiBold text=\"Delete message?\" fontSize={30} alignCenter margin=\"0px 0px 25px 0px\" />\r\n                        <div className=\"buttons-container\">\r\n                            <Button type=\"button\" defaultButton small outline text=\"no\" margin=\"10px\" width={100} onClick={onClose} />\r\n                            <Button type=\"button\" defaultButton small outline text=\"yes\" margin=\"10px\" width={100}\r\n                                    onClick={() => {\r\n                                         dispatch(deleteMessage(messageId,partnerId));\r\n                                         onClose(); \r\n                                      }} />\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    getCurrentConversationMessages = messages => {\r\n        const {message:deleteMessage} = this.props;\r\n        return messages.map(message => {\r\n            message.isFetchingAction = (deleteMessage.isFetching && String(deleteMessage.currentMessageIdIsDeleting) === String(message._id));\r\n            return message;\r\n        })\r\n    }\r\n\r\n    renderChatContainer = () => {\r\n        const {message:getMessages,conversation:{currentPartnerIdConversation,result:{conversations}}} = this.props;\r\n\r\n        if(!currentPartnerIdConversation){\r\n            return (\r\n                <div className=\"empty-message-container\">\r\n                    <Icon icon=\"chat-emoji\" height={200} width={200} margin=\"0px 0px 25px 20px\" />\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const currentConversation = conversations.find(con => String(con.partnerId._id) === String(currentPartnerIdConversation));\r\n        const {nickname,profileColor} = currentConversation.partnerId;\r\n\r\n        return (\r\n            <div className=\"chat-content\">\r\n                <header className=\"header-container\">\r\n                    <UserInfo\r\n                        isFetching={false}\r\n                        sketchDark\r\n                        profile={{label:nickname,height:40,width:40,backgroundColor:profileColor,color:'white',labelFontSize:14}}\r\n                        title={{text:nickname,fontSize:13,margin:\"0px 0px 0px 14px\"}}\r\n                        desc={{text:'',fontSize:13,maxWidth:100,margin:\"0px 0px 0px 14px\"}}\r\n                    />\r\n                </header>\r\n                <section ref={this.conversationContainer} className=\"conversation-container\">\r\n                   <MessageList \r\n                         isFetching={getMessages.isFetching}\r\n                         item={this.getCurrentConversationMessages(currentConversation.messages)}\r\n                         onMouseOver={this.setConversationIsRead}\r\n                         onFocus={this.setConversationIsRead}\r\n                         handleDeleteMessage={this.handleDeleteMessage}\r\n                   />\r\n                </section>\r\n                <footer className=\"footer-container\">\r\n                    <ContentEditable onEnter={this.handleSendMessage} onFocus={this.setConversationIsRead} />\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n\r\n   \r\n    render(){\r\n        return(\r\n            <div className=\"chat-container\">\r\n                {this.renderChatContainer()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    conversation: state.conversation,\r\n    message: state.message\r\n});\r\n\r\nexport default connect(mapStateToProps)(Chat);"]},"metadata":{},"sourceType":"module"}