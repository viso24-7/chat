{"ast":null,"code":"import { fetch } from 'whatwg-fetch';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport queryString from 'querystring';\nimport { createBrowserHistory } from 'history';\nimport store from '../store/store';\nimport { reset } from '../actions/main';\nimport { stopChannel } from '../actions/socket';\nexport function isDevelopmentEnv() {\n  return process.env.NODE_ENV.toLowerCase() === 'development';\n}\nexport function setCookie(key, value, expires) {\n  return Cookies.set(key, value, {\n    expires\n  });\n}\nexport function removeCookie(key) {\n  return Cookies.remove(key);\n}\nexport function getCookieJson(key) {\n  return Cookies.getJSON(key);\n}\nexport function getCookie(key) {\n  return Cookies.get(key);\n}\nexport function setToken(value) {\n  return setCookie(\"token\", value, 7);\n}\nexport function setUser(value) {\n  return setCookie(\"user\", value, 7);\n}\nexport function getToken() {\n  return getCookieJson(\"token\");\n}\nexport function getUser() {\n  return getCookieJson(\"user\");\n}\nexport function removeToken() {\n  return removeCookie(\"token\");\n}\nexport function removeUser() {\n  return removeCookie(\"user\");\n}\nexport function createAcronym(param) {\n  return (param || '').toUpperCase().slice(0, 2);\n}\nexport const resetRedux = () => {\n  const {\n    dispatch\n  } = store;\n  dispatch(reset());\n};\nexport const logout = async () => {\n  const {\n    dispatch\n  } = store;\n  dispatch(stopChannel());\n  removeToken();\n  removeUser();\n  resetRedux();\n  history.push('/signin');\n};\nexport const login = async (token, user) => {\n  await setToken(token);\n  await setUser(user);\n  await resetRedux();\n  await history.push('/');\n};\nexport const sendRequest = async ({\n  url,\n  method,\n  body,\n  query\n}) => {\n  const token = getToken();\n  const fetchParams = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'x-access-token': token\n    },\n    body\n  };\n\n  if (body) {\n    fetchParams.body = JSON.stringify(body);\n  }\n\n  const result = await fetch(query ? `${url}?${queryString.stringify(query)}` : url, fetchParams);\n\n  switch (result.status) {\n    case 401:\n      logout();\n      break;\n\n    case 500:\n      toast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\n      break;\n\n    default:\n      break;\n  }\n\n  return result.json();\n};\nexport function searchParam(array, params) {\n  let result = array;\n\n  _.mapKeys(params, (value, key) => {\n    if (value) {\n      result = _.filter(array, model => {\n        return _.includes(model[key], value.toLowerCase());\n      });\n    }\n  });\n\n  return result;\n}\nexport const setConversationLastMessageDateTime = date => {\n  const diffHours = moment(new Date()).diff(moment(date), 'hour');\n  const diffDays = moment(new Date()).startOf('day').diff(moment(date).startOf('day'), 'day');\n\n  if (diffHours <= 0) {\n    return moment(date).fromNow(true);\n  }\n\n  if (diffDays <= 0) {\n    return moment(date).format('HH:mm');\n  }\n\n  if (diffDays <= 6) {\n    if (diffDays === 1) {\n      return 'yesterday';\n    }\n\n    return moment(date).format('dddd');\n  }\n\n  return moment(date).format('DD/MM/YYYY');\n};","map":{"version":3,"sources":["C:/JavascriptProjects2/socketChatApp/client/src/utils/utilMethods.js"],"names":["fetch","_","moment","Cookies","toast","queryString","createBrowserHistory","store","reset","stopChannel","isDevelopmentEnv","process","env","NODE_ENV","toLowerCase","setCookie","key","value","expires","set","removeCookie","remove","getCookieJson","getJSON","getCookie","get","setToken","setUser","getToken","getUser","removeToken","removeUser","createAcronym","param","toUpperCase","slice","resetRedux","dispatch","logout","history","push","login","token","user","sendRequest","url","method","body","query","fetchParams","headers","JSON","stringify","result","status","error","constants","LABELS","MAIN","GLOBAL_ERROR","json","searchParam","array","params","mapKeys","filter","model","includes","setConversationLastMessageDateTime","date","diffHours","Date","diff","diffDays","startOf","fromNow","format"],"mappings":"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","sourcesContent":["import {fetch} from 'whatwg-fetch';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport Cookies from 'js-cookie';\r\nimport {toast} from 'react-toastify';\r\nimport queryString from 'querystring';\r\nimport {createBrowserHistory} from 'history';\r\nimport store from '../store/store';\r\nimport {reset} from '../actions/main';\r\nimport {stopChannel} from '../actions/socket';\r\n\r\n\r\n\r\nexport function isDevelopmentEnv () {\r\n\treturn process.env.NODE_ENV.toLowerCase() === 'development';\r\n}\r\n\r\nexport function setCookie(key,value,expires) {\r\n\treturn Cookies.set(key, value, { expires });\r\n}\r\n\r\nexport function removeCookie(key){  return Cookies.remove(key); }\r\nexport function getCookieJson(key){ return Cookies.getJSON(key); }\r\nexport function getCookie(key){     return Cookies.get(key); }\r\nexport function setToken(value){ return setCookie(\"token\", value,7); }\r\nexport function setUser(value){  return setCookie(\"user\", value,7); }\r\nexport function getToken(){      return getCookieJson(\"token\"); }\r\nexport function getUser () {     return getCookieJson(\"user\"); }\r\nexport function removeToken () { return removeCookie(\"token\"); }\r\nexport function removeUser () {  return removeCookie(\"user\"); }\r\n\r\nexport function createAcronym (param) {\r\n\treturn (param || '').toUpperCase().slice(0, 2);\r\n}\r\n\r\nexport const resetRedux = () => {\r\n\tconst {dispatch} = store;\r\n\tdispatch(reset());\r\n}\r\n\r\nexport const logout = async () => {\r\n\tconst {dispatch} = store;\r\n\r\n\tdispatch(stopChannel());\r\n\tremoveToken();\r\n\tremoveUser();\r\n\tresetRedux();\r\n\thistory.push('/signin');\r\n}\r\n\r\nexport const login = async (token,user) => {\r\n\tawait setToken(token);\r\n\tawait setUser(user);\r\n\tawait resetRedux();\r\n\tawait history.push('/');\r\n}\r\n\r\nexport const sendRequest = async ({url,method,body,query}) => {\r\n\tconst token = getToken();\r\n\tconst fetchParams = {\r\n\t\tmethod,\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'x-access-token': token\r\n\t\t},\r\n\t\tbody\r\n\t};\r\n\r\n\tif (body) {\r\n\t\tfetchParams.body = JSON.stringify(body);\r\n\t}\r\n\r\n\tconst result = await fetch(query ? `${url}?${queryString.stringify(query)}` : url, fetchParams);\r\n\r\n\tswitch (result.status) {\r\n\t\tcase 401:\r\n\t\t\tlogout();\r\n\t\t\tbreak;\r\n\r\n\t\tcase 500:\r\n\t\t\ttoast.error(constants.LABELS.MAIN.GLOBAL_ERROR);\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn result.json();\r\n}\r\n\r\nexport function searchParam (array, params) {\r\n\tlet result = array;\r\n\r\n\t_.mapKeys(params, (value, key) => {\r\n\t\tif (value) {\r\n\t\t\tresult = _.filter(array, (model) => {\r\n\t\t\t\treturn _.includes(model[key], value.toLowerCase());\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\treturn result;\r\n}\r\n\r\nexport const setConversationLastMessageDateTime = (date) => {\r\n\tconst diffHours = moment(new Date()).diff(moment(date), 'hour');\r\n\tconst diffDays = moment(new Date()).startOf('day').diff(moment(date).startOf('day'), 'day');\r\n\r\n\tif (diffHours <= 0) { return moment(date).fromNow(true);}\r\n\tif (diffDays <= 0)  { return moment(date).format('HH:mm'); }\r\n\tif (diffDays <= 6) {\r\n\t\tif (diffDays === 1) { return 'yesterday';\t}\r\n\t\treturn moment(date).format('dddd');\r\n\t}\r\n\r\n\treturn moment(date).format('DD/MM/YYYY');\r\n}\r\n"]},"metadata":{},"sourceType":"module"}